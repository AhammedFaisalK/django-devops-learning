# .github/workflows/ci-cd.yml
name: Django DevOps CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE_NAME: django-devops-app

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 coverage

      - name: Run Django system checks
        run: |
          python manage.py check --deploy

      - name: Run Django tests with coverage
        run: |
          coverage run --source='.' manage.py test
          coverage report
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install security tools
        run: |
          pip install safety bandit

      - name: Run safety check
        run: |
          safety check -r requirements.txt

      - name: Run bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . || true

  build-and-test-docker:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .

      - name: Test Docker image
        run: |
          # Start container in background
          docker run -d -p 8000:8000 --name test-container ${{ env.DOCKER_IMAGE_NAME }}:latest

          # Wait for container to start
          sleep 30

          # Test health endpoint
          curl -f http://localhost:8000/health/ || exit 1

          # Test main page
          curl -f http://localhost:8000/ || exit 1

          # Stop and remove container
          docker stop test-container
          docker rm test-container

      - name: Run container security scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/root/.cache/ aquasec/trivy:latest \
            image --exit-code 0 --severity HIGH,CRITICAL \
            ${{ env.DOCKER_IMAGE_NAME }}:latest

  ansible-lint:
    name: Ansible Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Ansible and ansible-lint
        run: |
          pip install ansible ansible-lint

      - name: Run ansible-lint
        run: |
          cd ansible
          ansible-lint playbook.yml || true

      - name: Validate Ansible syntax
        run: |
          cd ansible
          ansible-playbook --syntax-check -i inventory.ini playbook.yml

  deploy-simulation:
    name: Deploy Simulation
    runs-on: ubuntu-latest
    needs: [test, build-and-test-docker, ansible-lint]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Ansible
        run: |
          pip install ansible

      - name: Run Ansible playbook (dry run)
        run: |
          cd ansible
          ansible-playbook -i inventory.ini playbook.yml --check --diff -v

      - name: Notify deployment status
        run: |
          echo "ðŸš€ Deployment simulation completed successfully!"
          echo "âœ… All checks passed"
          echo "ðŸ“¦ Docker image built and tested"
          echo "ðŸ”§ Ansible playbook validated"
