- name: Deploy Django DevOps Learning Project
  hosts: webservers
  become: yes
  gather_facts: yes

  vars:
    app_name: django-devops-app
    app_port: 8000
    app_dir: /opt/django-devops-learning
    docker_image: "{{ app_name }}:latest"

  tasks:
    - name: Print deployment information
      debug:
        msg: "Starting deployment of {{ app_name }} on {{ inventory_hostname }}"

    - name: Update apt cache (Ubuntu/Debian)
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"
      tags: [setup]

    - name: Install required packages
      package:
        name:
          - curl
          - git
          - python3
          - python3-pip
        state: present
      tags: [setup]

    - name: Install Docker
      apt:
        name: docker.io
        state: present
      when: ansible_os_family == "Debian"
      tags: [docker]

    - name: Install Docker Compose
      pip:
        name: docker-compose
        state: present
      tags: [docker]

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
      tags: [docker]

    - name: Add current user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      tags: [docker]

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0755"
      tags: [deploy]

    - name: Copy application files
      synchronize:
        src: ../
        dest: "{{ app_dir }}/"
        delete: yes
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=__pycache__"
          - "--exclude=*.pyc"
          - "--exclude=.env"
          - "--exclude=venv"
      tags: [deploy]

    - name: Check if Docker image exists
      docker_image_info:
        name: "{{ docker_image }}"
      register: docker_image_info
      tags: [deploy]

    - name: Build Docker image
      docker_image:
        name: "{{ docker_image }}"
        build:
          path: "{{ app_dir }}"
          pull: yes
        source: build
        force_source: yes
      tags: [deploy]

    - name: Stop existing container if running
      docker_container:
        name: "{{ app_name }}"
        state: stopped
      ignore_errors: yes
      tags: [deploy]

    - name: Remove existing container
      docker_container:
        name: "{{ app_name }}"
        state: absent
      ignore_errors: yes
      tags: [deploy]

    - name: Run Django migrations
      docker_container:
        name: "{{ app_name }}-migrate"
        image: "{{ docker_image }}"
        command: python manage.py migrate
        volumes:
          - "{{ app_dir }}:/app"
        state: started
        detach: false
        cleanup: yes
      tags: [deploy]

    - name: Start Django application container
      docker_container:
        name: "{{ app_name }}"
        image: "{{ docker_image }}"
        state: started
        restart_policy: always
        ports:
          - "{{ app_port }}:8000"
        env:
          DEBUG: "False"
          SECRET_KEY: "{{ secret_key | default('change-me-in-production') }}"
        volumes:
          - "{{ app_dir }}:/app"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 40s
      tags: [deploy]

    - name: Wait for application to be ready
      uri:
        url: "http://localhost:{{ app_port }}/health/"
        method: GET
        status_code: 200
      register: health_check
      until: health_check.status == 200
      retries: 30
      delay: 2
      tags: [deploy, verify]

    - name: Verify application is responding
      uri:
        url: "http://localhost:{{ app_port }}/"
        method: GET
        status_code: 200
      tags: [deploy, verify]

    - name: Display deployment summary
      debug:
        msg:
          - "üéâ Deployment completed successfully!"
          - "üåê Application URL: http://localhost:{{ app_port }}/"
          - "üíö Health Check: http://localhost:{{ app_port }}/health/"
          - "üê≥ Docker Container: {{ app_name }}"
          - "üìÅ Application Directory: {{ app_dir }}"
      tags: [deploy]
